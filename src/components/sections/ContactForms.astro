---
import Title from "@/components/utils/Title.astro"
import FormManager from "@/components/utils/FormManager.astro"
import { contact } from "@/i18n/contact"
import type { FormConfig } from "@/types/formsTypes"

interface ContactFormsProps {
  contactFormConfig: FormConfig
  postulateFormConfig: FormConfig
  lang: "es" | "en" | "ca" | "eu" | "gl"
}

const { lang, contactFormConfig, postulateFormConfig } = Astro.props as ContactFormsProps
---

<section class="contact-forms-container">
  <Title 
    title={contact[lang].title}
    subtitle={contact[lang].subtitle}
    size="large"
    theme="light"
    align="center"
    jump={false}
  />
  
  <nav class="form-nav">
    <button class="form-nav-btn active" data-form="contact">{contact[lang].buttons.contact}</button>
    <button class="form-nav-btn" data-form="project">{contact[lang].buttons.postulate}</button>
  </nav>
  
  <section class="forms-container">
    <article class="form-wrapper active" id="contact-form-wrapper">
      <FormManager formConfig={contactFormConfig} lang={lang}/>
    </article>
    
    <article class="form-wrapper" id="project-form-wrapper">
      <FormManager formConfig={postulateFormConfig} lang={lang}/>
    </article>
  </section>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const formButtons = document.querySelectorAll('.form-nav-btn')
    const formWrappers = document.querySelectorAll('.form-wrapper')
    
    formButtons.forEach(button => {
      button.addEventListener('click', function(this: HTMLButtonElement) {
        const formType = this.getAttribute('data-form')
        
        formButtons.forEach(btn => btn.classList.remove('active'))
        this.classList.add('active')
        
        formWrappers.forEach(wrapper => {
          wrapper.classList.remove('active')
          if (wrapper.id === `${formType}-form-wrapper`) {
            wrapper.classList.add('active')
          }
        })
      })
    })
  })
</script>

<style>
  .contact-forms-container {
    position: relative;
    margin: 10rem auto auto auto;
    width: 100%;
  }
  
  .form-nav {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 2rem;
    margin-bottom: 2rem;
  }
  
  .form-nav-btn {
    padding: 0.75rem 1.5rem;
    background-color: var(--color-quinary);
    border: 3px solid var(--color-secondary);
    border-radius: 8px;
    color: var(--color-tertiary);
    font-weight: 600;
    cursor: pointer;
    opacity: .5;
    transition: all 0.3s ease;
  }
  
  .form-nav-btn.active {
    background-color: rgba(var(--color-primary-rgb-value), 0.8);
    color: var(--color-quinary);
    box-shadow: 0 0px 8px var(--color-tertiary);
    border-color: var(--color-tertiary);
    opacity: 1;
  }
  
  .forms-container {
    position: relative;
    width: 100%;
    min-height: 400px;
  }
  
  .form-wrapper {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }
  
  .form-wrapper.active {
    position: relative;
    opacity: 1;
    visibility: visible;
  }
  
  .half-width {
    grid-column: span 1;
  }
  
  .full-width {
    grid-column: 1 / -1;
  }
  
  @media (width < 768px) {
    .form-nav {
      flex-direction: column;
      align-items: center;
      gap: 0.75rem;
    }
    
    .form-nav-btn {
      width: 100%;
      max-width: 300px;
    }
    
    .half-width {
      grid-column: 1 / -1;
    }
  }
</style>